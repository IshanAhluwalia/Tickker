name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest ../tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Run backend linting
      run: |
        cd backend
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --passWithNoTests
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Check build artifacts
      run: |
        cd frontend
        ls -la .next/

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && npm ci
    
    - name: Start backend server
      run: |
        cd backend
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/api/portfolio/history || echo "Expected: No data found"
    
    - name: Build and test frontend with backend
      run: |
        cd frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan on backend
      run: |
        cd backend
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -x tests/ -f json -o bandit-report.json || true
    
    - name: Run frontend security audit
      run: |
        cd frontend
        npm audit --audit-level=high
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        pip install black isort mypy
    
    - name: Check Python code formatting
      run: |
        cd backend
        black --check --diff .
        isort --check-only --diff .
    
    - name: Type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports || true